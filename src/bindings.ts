
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getSettings() : Promise<Result<Settings, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_settings") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveSettings(settings: Settings) : Promise<Result<Settings, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_settings", { settings }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async connectModbus() : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("connect_modbus") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async disconnectModbus() : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("disconnect_modbus") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async exportData(path: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("export_data", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async importData(path: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("import_data", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async filePath() : Promise<string> {
    return await TAURI_INVOKE("file_path");
},
async folderPath() : Promise<string> {
    return await TAURI_INVOKE("folder_path");
},
async sendColumnData(numberPlates: number, initialMass: number, initialConcentration: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("send_column_data", { numberPlates, initialMass, initialConcentration }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cancelColumnData() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cancel_column_data") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleSkip(skipCount: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_skip", { skipCount }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setSpeed(speedFactor: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_speed", { speedFactor }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async availablePorts() : Promise<Result<string[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("available_ports") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async toggleColumnData() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("toggle_column_data") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type DataError = { type: "EmptyDataError" } | { type: "NoMoreDataError" } | { type: "NoDataError" } | { type: "CustomError"; data: string }
export type Error = { type: "SettingsError"; data: SettingsError } | { type: "FileError"; data: FileError } | { type: "ModbusError"; data: ModbusError } | { type: "RootError"; data: RootError } | { type: "DataError"; data: DataError } | { type: "ImportError"; data: ImportError } | { type: "ExportError"; data: ExportError }
export type ExportError = { type: "InvalidFormat"; data: string } | { type: "NoDataError" } | { type: "ExportDataError"; data: string }
export type FileError = { type: "ReadError"; data: string } | { type: "WriteError"; data: string } | { type: "EnsureFileError"; data: string } | { type: "InvalidFileType" } | { type: "ParseJsonError"; data: string } | { type: "CreateDirError"; data: string } | { type: "SerializeError"; data: string } | { type: "InvalidPathError"; data: string }
export type ImportError = { type: "InvalidFormat"; data: string }
export type ModbusError = { type: "ConnectionError"; data: string } | { type: "ReadCoilsError"; data: string } | { type: "WriteCoilsError"; data: string } | { type: "ReadHoldingRegistersError"; data: string } | { type: "WriteHoldingRegistersError"; data: string } | { type: "WriteSingleCoilError"; data: string } | { type: "WriteSingleRegisterError"; data: string }
export type ModbusSettings = { usbPort: string; baudrate: number; initialAddress: number; count: number; timeout: number; unitId: number }
export type RootError = { type: "NotFoundedRoot" } | { type: "DivisionByZero" } | { type: "NegativeRootError" }
export type Settings = { modbus: ModbusSettings }
export type SettingsError = { type: "LoadError"; data: string } | { type: "SaveError"; data: string } | { type: "GetUsbDevicesError"; data: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
